vizGG2 = plot(viz, allTerms = T) +
l_fitLine(colour = "red") + l_rug(mapping = aes(x=x,y=y), alpha=0.8) +
labs(title = 'Males (GAM)')+
l_ciLine(mul = 5, colour = "blue", linetype = 2)+
l_points(shape = 19, size = 1, alpha = 0.1) + theme_classic()
print(vizGG2,pages =1)
fig7 =paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/",site,'/',site,"GAM2_Males.png",sep="")
ggsave(fig7)
#plot data grouped with ITS as proportion of hours per day with clicks
title1 = paste(site,"Yearly Average of Proportion of Hours per Day with Clicks - Time Series (ITS)")
plot1 = ggplot(GroupedYearF, aes(x=Day,y=HoursPropFE))+
geom_bar(stat = "identity")+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
plot2 = ggplot(GroupedYearJ, aes(x=Day,y=HoursPropJU))+
geom_bar(stat = "identity")+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
plot3 = ggplot(GroupedYearM, aes(x=Day,y=HoursPropMA))+
geom_bar(stat = "identity")+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
figure = ggarrange(plot1,plot2,plot3, labels = c("Social Units","  Mid-Size  ","    Males   "),align = "v",ncol = 1, nrow = 3)
annotate_figure(figure, top = text_grob(title1, face = "bold", size = 14), bottom = text_grob("Time (years)"),
left = text_grob("Proportion of Hours/Day w/Clicks", rot = 90))
fig1 =paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/",site,'/',site,"AveragedHoursProp_TimeSeriesITS_StackedGroups.png",sep="")
ggsave(fig1)
if (nrow(oneyear) >= 365) {
#plot data as time series with error bars
title4 = paste(site,"Yearly Average of Proportion of Hours per Day with Clicks - Time Series")
plot1 = ggplot(oneyearF, aes(x=Day,y=HoursPropFE))+
geom_errorbar(aes(ymin = HoursPropFE - SEM, ymax = HoursPropFE + SEM))+
geom_line()+
geom_point()+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
plot2 = ggplot(oneyearJ, aes(x=Day,y=HoursPropJU))+
geom_errorbar(aes(ymin = HoursPropJU - SEM, ymax = HoursPropJU + SEM))+
geom_line()+
geom_point()+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
plot3 = ggplot(oneyearM, aes(x=Day,y=HoursPropMA))+
geom_errorbar(aes(ymin = HoursPropMA - SEM, ymax = HoursPropMA + SEM))+
geom_line()+
geom_point()+
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
figure = ggarrange(plot1,plot2,plot3, labels = c("Social Units","  Mid-Size  ","    Males   "),align = "v",ncol = 1, nrow = 3)
annotate_figure(figure, top = text_grob(title1, face = "bold", size = 14), bottom = text_grob("Time (years)"),
left = text_grob("Proportion of Hours/Day w/Clicks", rot = 90))
fig5 =paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/",site,'/',site,"AveragedHoursProp_TimeSeries_ErrorBars_StackedGroups.png",sep="")
ggsave(fig5)
}
## GAMs ##
#Social Units#
#GAMs with appropiate ITS binning
#GAM to identify seasonal pattern
if (sum(GroupedDayF$Female > 0)){
#females
gamTw = gam(FeHoursProp ~ s(day, bs = 'cc', k = 47), data = GroupedDayF, family = tw, method = "REML")
plot(gamTw, pages =1)
summary(gamTw)
#GAM to check for significance between seasons
gamTwS = gam(FeHoursProp ~ Season, data = GroupedDayF, family = tw, method = "REML")
summary(gamTwS)
#Better GAM plots
#pattern only
viz = getViz(gamTw)
print(plot(viz,allTerms=T),pages=1)
#first way to plot GAM
vizGG = plot(viz,allTerms = T) +
labs(title = 'Social Units (GAM)', x = 'Day of Year')+
l_fitLine(linetype = 1, size = 2)  +
l_fitContour()+
#l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_ciPoly(level = 0.95, alpha = 1/2)+
l_ciBar() +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=20,face="bold"))
theme_get()
print(vizGG,pages =1)
fig6 =paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/",site,'/',site,"GAM1_SocialUnits.png",sep="")
ggsave(fig6)
#second way to plot GAM
vizGG2 = plot(viz, allTerms = T) +
l_fitLine(colour = "red") + l_rug(mapping = aes(x=x,y=y), alpha=0.8) +
labs(title = 'Social Units (GAM)')+
l_ciLine(mul = 5, colour = "blue", linetype = 2)+
#l_points(shape = 19, size = 1, alpha = 0.1) +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=20,face="bold"))+
theme_classic()
print(vizGG2,pages =1)
fig7 =paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/",site,'/',site,"GAM2_SocialUnits.png",sep="")
ggsave(fig7)
}
#Juveniles#
#GAMs with appropiate ITS binning
#GAM to identify seasonal pattern
gamTw = gam(JuHoursProp ~ s(day, bs = 'cc', k = 47), data = GroupedDayJ, family = tw, method = "REML")
plot(gamTw, pages =1)
summary(gamTw)
#GAM to check for significance between seasons
gamTwS = gam(JuHoursProp ~ Season, data = GroupedDayJ, family = tw, method = "REML")
summary(gamTwS)
#Better GAM plots
#pattern only
viz = getViz(gamTw)
print(plot(viz,allTerms=T),pages=1)
#first way to plot GAM
vizGG = plot(viz,allTerms = T) +
l_points() +
labs(title = 'Mid-Size (GAM)')+
l_fitLine(linetype = 3)  +
l_fitContour()+
l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_ciBar() +
l_points(shape = 19, size = 1, alpha = 0.1) +
l_rug() +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=20,face="bold"))
print(vizGG,pages =1)
fig6 =paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/",site,'/',site,"GAM1_Juveniles.png",sep="")
ggsave(fig6)
#second way to plot GAM
vizGG2 = plot(viz, allTerms = T) +
l_fitLine(colour = "red") + l_rug(mapping = aes(x=x,y=y), alpha=0.8) +
labs(title = 'Mid-Size (GAM)')+
l_ciLine(mul = 5, colour = "blue", linetype = 2)+
l_points(shape = 19, size = 1, alpha = 0.1) +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=20,face="bold"))+
theme_classic()
print(vizGG2,pages =1)
fig7 =paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/",site,'/',site,"GAM2_Juveniles.png",sep="")
ggsave(fig7)
#Males#
#GAMs with appropiate ITS binning
#GAM to identify seasonal pattern
gamTw = gam(MaHoursProp ~ s(day, bs = 'cc', k = 35), data = GroupedDayM, family = tw, method = "REML")
plot(gamTw, pages =1)
summary(gamTw)
#GAM to check for significance between seasons
gamTwS = gam(MaHoursProp ~ Season, data = GroupedDayM, family = tw, method = "REML")
summary(gamTwS)
#Better GAM plots
#pattern only
viz = getViz(gamTw)
print(plot(viz,allTerms=T),pages=1)
#first way to plot GAM
vizGG = plot(viz,allTerms = T) +
labs(title = 'Males (GAM)', x = 'Day of Year')+
l_fitLine(linetype = 1, size = 2)  +
l_fitContour()+
#l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_ciPoly(level = 0.95, alpha = 1/2)+
l_ciBar() +
theme(axis.text=element_text(size=18),
axis.title=element_text(size=20,face="bold"))
theme_get()
fig6 =paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/",site,'/',site,"GAM1_Males.png",sep="")
ggsave(fig6)
#second way to plot GAM
vizGG2 = plot(viz, allTerms = T) +
l_fitLine(colour = "red") + l_rug(mapping = aes(x=x,y=y), alpha=0.8) +
labs(title = 'Males (GAM)')+
l_ciLine(mul = 5, colour = "blue", linetype = 2)+
l_points(shape = 19, size = 1, alpha = 0.1) + theme_classic()
print(vizGG2,pages =1)
fig7 =paste("G:/My Drive/GofAK_TPWS_metadataReduced/SeasonalityAnalysis/",site,'/',site,"GAM2_Males.png",sep="")
ggsave(fig7)
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0,-119.4, 34.1  -119.4, 34.1 -119.4, 34 -119.4, 34.0 -119.4)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0,-119.4, 34.1  -119.4, 34.1 -119.4, 34 -119.4, 34.0 -119.4)) ")
knitr::opts_chunk$set(echo = TRUE)
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-70.2 43.5, -69.8 43.5, -69.8 43.9, -70.2 43.9, -70.2 43.5)) ")
#loading robis
installed <- rownames(installed.packages())
if ( !("robis" %in% installed) ){
if ( !("remotes" %in% installed) )install.packages("remotes")
remotes::install_github("iobis/robis")
}
#load libraries
library(robis)
library('ggplot2')
library("rnaturalearth")
library("rnaturalearthdata")
library(roperators)
library(dplyr)
library(dggridR)
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-70.2 43.5, -69.8 43.5, -69.8 43.9, -70.2 43.9, -70.2 43.5)) ")
#loading robis
installed <- rownames(installed.packages())
if ( !("robis" %in% installed) ){
if ( !("remotes" %in% installed) )install.packages("remotes")
remotes::install_github("iobis/robis")
}
#load libraries
library(robis)
library('ggplot2')
library("rnaturalearth")
library("rnaturalearthdata")
library(roperators)
library(dplyr)
library(dggridR)
#loading robis
installed <- rownames(installed.packages())
if ( !("robis" %in% installed) ){
if ( !("remotes" %in% installed) )install.packages("remotes")
remotes::install_github("iobis/robis")
}
#load libraries
library(robis)
library('ggplot2')
library("rnaturalearth")
library("rnaturalearthdata")
library(roperators)
library(dplyr)
library(magrittr)
library(vegan)
library(dggridR)
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0,-119.4, 34.1  -119.4, 34.1 -119.4, 34 -119.4, 34.0 -119.4)) ")
#loading robis
installed <- rownames(installed.packages())
if ( !("robis" %in% installed) ){
if ( !("remotes" %in% installed) )install.packages("remotes")
remotes::install_github("iobis/robis")
}
#load libraries
library(robis)
library('ggplot2')
library("rnaturalearth")
library("rnaturalearthdata")
library(roperators)
library(dplyr)
library(dggridR)
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-70.2 43.5, -69.8 43.5, -69.8 43.9, -70.2 43.9, -70.2 43.5)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0,-119.4, 34.1  -119.4, 34.1 -119.4, 34 -119.4, 34.0 -119.4)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0 -119.4, 34.1  -119.4, 34.1 -119.4, 34 -119.4, 34.0 -119.4)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0 -119.4, 34.1  -119.4, 34.1 -119.4, 34 -119.4, 34.0 -119.4)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0 -119.4, 34.1 -119.4, 34.1 -119.4, 34 -119.4, 34.0 -119.4)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.4 34.0, -119.4 34.1, -119.4 34.1, -119.4 34,
-119.4 34.0)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.4 34.0, -119.4 34.1, -119.4 34.1, -119.4 34, -119.4 34.0)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0 -119.4, 34.1 -119.4, 34.1 -119.4, 34 -119.4, 34.0 -119.4)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0 -119.4, 34.1 -119.4, 34.1 -119.4, 34 -119.4, 34.0 -119.4)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.4 34.0, -119.4 34.1, -119.4 34.1, -119.4 34.0, -119.4 34.0)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.4 34.0, -119.4 34.1, -119.4 34.1, -119.4 34.0, -119.4 34.0))")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.41 34.0, -119.41 34.08, -119.36 34.08, -119.36 34.0, -119.36 34.01))")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-120.58357239 34.20654297, -118.90743256 33.36573029))")
occurence("Pterois volitans")
ptevol <- occurrence("Pterois volitans")
View(ptevol)
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0 -119.41, 34.08 -119.41, 34.08 -119.36, 34.0 -119.36, 34.01 -119.36)) ")
(geometry = "POLYGON ((-119.41 34.0, -119.41 34.08, -119.36 34.08, -119.36 34.0, -119.36 34.01))")
geometry = "POLYGON ((-119.41 34.0, -119.41 34.08, -119.36 34.08, -119.36 34.0, -119.36 34.01))
""
""
geometry = "POLYGON ((-119.41 34.0, -119.41 34.08, -119.36 34.08, -119.36 34.0, -119.36 34.01))"
view(geometry)
View(geometry)
#loading robis
installed <- rownames(installed.packages())
if ( !("robis" %in% installed) ){
if ( !("remotes" %in% installed) )install.packages("remotes")
remotes::install_github("iobis/robis")
}
#load libraries
library(robis)
library('ggplot2')
library("rnaturalearth")
library("rnaturalearthdata")
library(roperators)
library(dplyr)
library(magrittr)
library(vegan)
SpeciesOccurence <- occurrence(geometry = "POLYGON ((34.0 -119.41, 34.08 -119.41, 34.08 -119.36, 34.0 -119.36, 34.01 -119.36)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.41 34.0, -119.41 34.08, -119.36 34.08, -119.36 34.0, -119.36 34.01))")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-120.58357239 34.20654297, -118.90743256 33.36573029))")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-70.2 43.5, -69.8 43.5, -69.8 43.9, -70.2 43.9, -70.2 43.5)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.41 34.0, -119.41 34.08, -119.36 34.08, -119.36 34.0, -119.36 34.01)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-120.58357239 34.20654297, -118.90743256 33.36573029)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.41 34.0, -119.41 34.08, -119.36 34.08, -119.36 34.0)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.41 34.006, -119.41 34.08, -119.36 34.08, -119.36 34.006, -119.36 34.01)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.41 34.0, -119.41 34.08, -119.36 34.08, -119.36 34.006, -119.41 34.0)) ")
View(SpeciesOccurence)
View(SpeciesOccurece)
View(SpeciesOccurence)
leafletmap(SpeciesOccurence)
install.packages("leaflet")
library(leafletmap)
library(leaflet)
leafletmap(SpeciesOccurence)
leafletmap(SpeciesOccurence)
library(leaflet)
leafletmap(SpeciesOccurence)
leaflet(SpeciesOccurence)
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-117.32 32.83, -117.34 32.83, -117.33 32.80, -117.32 32.80, -117.32 32.83)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-117.32 32.83, -117.34 32.83, -117.33 32.80, -117.32 32.80, -117.32 32.83, -117.32 32.83)) ")
#loading robis
installed <- rownames(installed.packages())
if ( !("robis" %in% installed) ){
if ( !("remotes" %in% installed) )install.packages("remotes")
remotes::install_github("iobis/robis")
}
#load libraries
library(robis)
library('ggplot2')
library("rnaturalearth")
library("rnaturalearthdata")
library(roperators)
library(dplyr)
library(magrittr)
library(vegan)
library(leaflet)
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-117.32 32.83, -117.34 32.83, -117.33 32.80, -117.32 32.80, -117.32 32.83, -117.32 32.83)) ")
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-117.32 32.83, -117.34 32.83, -117.33 32.80, -117.32 32.80, -117.32 32.83)) ")
#loading robis
installed <- rownames(installed.packages())
if ( !("robis" %in% installed) ){
if ( !("remotes" %in% installed) )install.packages("remotes")
remotes::install_github("iobis/robis")
}
#load libraries
library(robis)
library('ggplot2')
library("rnaturalearth")
library("rnaturalearthdata")
library(roperators)
library(dplyr)
library(magrittr)
library(vegan)
library(leaflet)
x = data.frame(lat = c("32°49.573", "32°47.945",  "32°47.945", "32°49.573", "32°49.573"),
lon = c("-117°19.000", "-117°20.528", "-117°20.068", "-117°19.000", "-117°19.000"))
x$lat = gsub('°', ' ', x$lat)
x$lon = gsub('°', ' ', x$lon)
#convert from decimalminute to decimal degree
x$latdec = measurements::conv_unit(x$lat, from = 'deg_dec_min', to = 'dec_deg')
install.packages("measurements")
library(measurements)
x = data.frame(lat = c("32°49.573", "32°47.945",  "32°47.945", "32°49.573", "32°49.573"),
lon = c("-117°19.000", "-117°20.528", "-117°20.068", "-117°19.000", "-117°19.000"))
x$lat = gsub('°', ' ', x$lat)
x$lon = gsub('°', ' ', x$lon)
#convert from decimalminute to decimal degree
x$latdec = measurements::conv_unit(x$lat, from = 'deg_dec_min', to = 'dec_deg')
x$londec = measurements::conv_unit(x$lon, from = 'deg_dec_min', to = 'dec_deg')
SpeciesOccurence <- occurrence(geometry = "POLYGON ((-119.41 34.0, -119.41 34.08, -119.36 34.08, -119.36 34.006, -119.41 34.0)) ")
# <- occurrence(geometry = "POLYGON ((-117.32 32.83, -117.34 32.83, -117.33 32.80, -117.32 32.80, -117.32 32.83)) ")
library(ncdf4)
library(httr)
library (naniar)
library(ggmap)
library(OpenStreetMap)
install.packages("OpenStreetMap")
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
install.packages("OpenStreetMap")
Sys.which("make")
install.packages("OpenStreetMap")
install.packages("blackbox")
library(ncdf4)
library(httr)
library (naniar)
library(ggmap)
library(OpenStreetMap)
library(ncdf4)
library(httr)
library(sf)
library(dplyr)
library(raster)
library(rgeos)
library(ggplot2)
library("rnaturalearth")
library("rnaturalearthdata")
#Set user directories
setwd('C:/Users/nposd/Documents/GitHub/SeaTech')
saveDir = paste('C:/Users/nposd/Documents/GitHub/SeaTech/Environmental_TimeSeries')
Year = 2014
SST = nc_open(paste("GofAK_SST_",Year,".nc",sep="")) #name of .nc file for year of interest
names(SST$var)
v1=SST$var[[1]]
SSTvar=ncvar_get(SST,v1)
SST_lon=v1$dim[[1]]$vals
SST_lat=v1$dim[[2]]$vals
dates=as.POSIXlt(v1$dim[[4]]$vals,origin='1970-01-01',tz='GMT')
dates=as.POSIXlt(v1$dim[[3]]$vals,origin='1970-01-01',tz='GMT')
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
r = raster(t(SSTvar[,,1]),xmn = min(SST_lon),xmx = max(SST_lon),ymn=min(SST_lat),ymx=max(SST_lat))
points = rasterToPoints(r, spatial = TRUE)
df = data.frame(points)
names(df)[names(df)=="layer"]="SST"
mid = mean(df$SST)
ggplot(data=world) +  geom_sf()+coord_sf(xlim= c(-154,-140),ylim=c(55,61),expand=FALSE)+
geom_raster(data = df , aes(x = x, y = y, fill = SST)) +
ggtitle(paste("Monthly SST", dates[1]))+geom_point(x = 211.97, y = 58.67, color = "black",size=3)+
xlab("Latitude")+ylab("Longitude")+
scale_fill_gradient2(midpoint = mid, low="yellow", mid = "orange",high="red")
layout(matrix(c(1,2,3,0,4,0), nrow=1, ncol=2), widths=c(5,1), heights=4)
layout.show(2)
par(mar=c(3,3,3,1))
r = raster(t(SSTvar[,,1]),xmn = min(SST_lon),xmx = max(SST_lon),ymn=min(SST_lat),ymx=max(SST_lat))
points = rasterToPoints(r, spatial = TRUE)
df = data.frame(points)
names(df)[names(df)=="layer"]="SST"
mid = mean(df$SST)
ggplot(data=world) +  geom_sf()+coord_sf(xlim= c(-154,-140),ylim=c(55,61),expand=FALSE)+
geom_raster(data = df , aes(x = x, y = y, fill = SST)) +
ggtitle(paste("Monthly SST", dates[1]))+geom_point(x = 211.97, y = 58.67, color = "black",size=3)+
xlab("Latitude")+ylab("Longitude")+
scale_fill_gradient2(midpoint = mid, low="yellow", mid = "orange",high="red")
df
SSTvar[,,1])
SSTvar[,,1]
xmn = min(SST_lon)
#plotting time series CB
I=which(ChlA_lon>=-154.5 & ChlA_lon<=-142.2) #change lon to SST_lon values to match ours, use max and min function
J=which(ChlA_lat>=54.8 & ChlA_lat<=61.3) #change ""
sst2=SSTvar[I,J,]
I=which(SST_lon>=-154.5 & SST_lon<=-142.2) #change lon to SST_lon values to match ours, use max and min function
J=which(SST_lat>=54.8 & SST_lat<=61.3) #change ""
sst2=SSTvar[I,J,]
n=dim(sst2)[3]
res=rep(NA,n)
for (i in 1:n)
res[i]=mean(sst2[,,i],na.rm=TRUE)
plot(1:n,res,axes=FALSE,type='o',pch=20,xlab='',ylab='SST (ºC)')
axis(2)
axis(1,1:n,format(dates,'%m'))
box()
#export timeseries as .csv to plot in MATLAB
TimeSeries = data.frame(format(dates,'%m'),res)
TimeSeries %>%
rename(
Month = format.dates....m..,
ChlA = res)
write.csv(TimeSeries,paste(saveDir,"/SST_",Year,".csv",sep =""))
library(ncdf4)
library(httr)
library(sf)
library(dplyr)
library(raster)
library(rgeos)
library(ggplot2)
library("rnaturalearth")
library("rnaturalearthdata")
#Set user directories
setwd('C:/Users/nposd/Documents/GitHub/SeaTech')
saveDir = paste('C:/Users/nposd/Documents/GitHub/SeaTech/Environmental_TimeSeries')
Year = 2019
#load files
SST = nc_open(paste("GofAK_SST_",Year,".nc",sep="")) #name of .nc file for year of interest
names(SST$var)
v1=SST$var[[1]]
SSTvar=ncvar_get(SST,v1)
SST_lon=v1$dim[[1]]$vals
SST_lat=v1$dim[[2]]$vals
dates=as.POSIXlt(v1$dim[[3]]$vals,origin='1970-01-01',tz='GMT')
#loading the world
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
#plotting in ggplot
r = raster(t(SSTvar[,,1]),xmn = min(SST_lon),xmx = max(SST_lon),ymn=min(SST_lat),ymx=max(SST_lat))
points = rasterToPoints(r, spatial = TRUE)
df = data.frame(points)
names(df)[names(df)=="layer"]="SST"
mid = mean(df$SST)
ggplot(data=world) +  geom_sf()+coord_sf(xlim= c(-154,-140),ylim=c(55,61),expand=FALSE)+
geom_raster(data = df , aes(x = x, y = y, fill = SST)) +
ggtitle(paste("Monthly SST", dates[1]))+geom_point(x = 211.97, y = 58.67, color = "black",size=3)+
xlab("Latitude")+ylab("Longitude")+
scale_fill_gradient2(midpoint = mid, low="yellow", mid = "orange",high="red")
#plotting time series CB
I=which(SST_lon>=-154.5 & SST_lon<=-142.2) #change lon to SST_lon values to match ours, use max and min function
J=which(SST_lat>=54.8 & SST_lat<=61.3) #change ""
sst2=SSTvar[I,J,]
n=dim(sst2)[3]
res=rep(NA,n)
for (i in 1:n)
res[i]=mean(sst2[,,i],na.rm=TRUE)
plot(1:n,res,axes=FALSE,type='o',pch=20,xlab='',ylab='SST (ºC)')
axis(2)
axis(1,1:n,format(dates,'%m'))
box()
#export timeseries as .csv to plot in MATLAB
TimeSeries = data.frame(format(dates,'%m'),res)
TimeSeries %>%
rename(
Month = format.dates....m..,
ChlA = res)
write.csv(TimeSeries,paste(saveDir,"/SST_",Year,".csv",sep =""))
#plotting time series CB
I=which(SST_lon>=-154.5 & SST_lon<=-142.2) #change lon to SST_lon values to match ours, use max and min function
J=which(SST_lat>=54.8 & SST_lat<=61.3) #change ""
sst2=SSTvar[I,J,]
n=dim(sst2)[3]
res=rep(NA,n)
for (i in 1:n)
res[i]=mean(sst2[,,i],na.rm=TRUE)
plot(1:n,res,axes=FALSE,type='o',pch=20,xlab='',ylab='SST (ºC)')
axis(2)
axis(1,1:n,format(dates,'%m'))
box()
#export timeseries as .csv to plot in MATLAB
TimeSeries = data.frame(format(dates,'%m'),res)
TimeSeries %>%
rename(
Month = format.dates....m..,
ChlA = res)
write.csv(TimeSeries,paste(saveDir,"/SST_",Year,".csv",sep =""))
